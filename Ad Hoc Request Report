-- create database named 'retail_events_id'
create database retail_events;

-- Take overview of all tables
SELECT * FROM retail_events_db.dim_campaigns;
SELECT * FROM retail_events_db.dim_products;
SELECT * FROM retail_events_db.dim_stores;
SELECT * FROM retail_events_db.fact_events;

/* 1. Provide a list of products with a base price greater than 500 and that are featured in promo type of 'BOGOF' (Buy One Get One Free). 
This information will help us identify high-value products that are currently being heavily discounted, 
which can be useful for evaluating our pricing and promotion strategies. */

select product_name, base_price, promo_type
FROM dim_products
JOIN fact_events
ON dim_products.product_code = fact_events.product_code
WHERE base_price > 500 AND promo_type = 'BOGOF';

/* 2.Generate a report that provides an overview of the number of stores in each city.
The results will be sorted in descending order of store counts, allowing us to identify the cities with the highest store presence.
The report includes two essential fields: city and store count, which will assist in optimizing our retail operations. */

select city, count(store_id) as stores
FROM dim_stores
GROUP BY city
ORDER BY stores DESC;


/* 3. Generate a report that displays each campaign along with the total revenue generated before and after the campaign?
The report includes three key fields: campaign_name, total_revenue(before_promotion), total_revenue(after_promotion).
This report should help in evaluating the financial impact of our promotional campaigns.(Display the values in millions) */ 

SELECT campaign_name, 
concat(sum(base_price * quantity_before_promo)/1000000, 'M')  as total_rev_BP,
concat(sum(CASE
WHEN promo_type = 'BOGOF' THEN (base_price / 2) * quantity_after_promo
WHEN promo_type = '50% OFF' THEN base_price * 0.5 * quantity_after_promo
WHEN promo_type = '25% OFF' THEN base_price*(3/4) * quantity_after_promo
WHEN promo_type = '33% OFF' THEN base_price*(67/100) * quantity_after_promo
WHEN promo_type = '500 Cashback' THEN (base_price - 500) * quantity_after_promo
END) / 1000000, 'M') as total_rev_AP
FROM dim_campaigns
JOIN fact_events
ON dim_campaigns.campaign_id = fact_events.campaign_id
group by campaign_name;

/*4. Produce a report that calculates the Incremental Sold Quantity (ISU%) for each category during the Diwali campaign. 
Additionally, provide rankings for the categories based on their ISU%. 
The report will include three key fields: category, isu%, and rank order. 
This information will assist in assessing the category-wise success and impact of the Diwali campaign on incremental sales.
Note: ISU% (Incremental Sold Quantity Percentage) is calculated as the percentage increase/decrease in quantity sold (after promo) 
compared to quantity sold (before promo)*/


WITH CTE as (
select dc.campaign_name, dp.category,
((sum(quantity_after_promo) - sum(quantity_before_promo)) / sum(quantity_before_promo)) * 100 as `ISU%`
FROM fact_events as fe
JOIN dim_campaigns as dc using (campaign_id)
JOIN dim_products as dp using (product_code)
WHERE campaign_name = 'Diwali'
Group by dc.campaign_name, dp.category
)

select *, 
RANK () OVER (ORDER BY `ISU%` DESC) as ISU_Rank
FROM CTE;


/* 5. Create a report featuring the Top 5 products, ranked by Incremental RevenuePercentage (IR%), 
across all campaigns. 
The report will provide essential information including product name, category, and ir%.
This analysis helps identify the most successful products in terms of incremental revenue across our
campaigns, assisting in product optimization. */

-- creating a new column named 'selling price' using promo_type on 'base_price'

ALTER table fact_events
ADD COLUMN selling_price DECIMAL (10,2);

UPDATE fact_events
SET selling_price =
CASE
WHEN promo_type = '50% OFF' OR promo_type = 'BOGOF' THEN base_price/2
WHEN promo_type = '25% OFF' THEN base_price*(3/4)
WHEN promo_type = '33% OFF' THEN base_price*(67/100)
WHEN promo_type = '500 Cashback' THEN base_price - 500
END;

WITH CTE as(
select 
dp.category,
dp.product_name,
sum(fe.base_price * fe.quantity_before_promo) as Rev_BP,
sum(fe.selling_price * fe.quantity_after_promo) as Rev_AP
FROM fact_events as fe
JOIN dim_products as dp 
ON dp.product_code = fe.product_code
group by dp.category, dp.product_name
),

CTE1 as (
select *,
Rev_AP - Rev_BP as IR,
(Rev_Ap - Rev_BP) / Rev_BP * 100 as `IR%`
FROM CTE
)

select category, product_name, 
IR, `IR%`,
RANK () OVER (ORDER BY `IR%` DESC) as IR_Rank
FROM CTE1
Limit 5;
